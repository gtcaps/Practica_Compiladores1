
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;
import main.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDatos extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symDatos.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDatos() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDatos(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDatos(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\006\004\000\002\006\003\000\002\004\007" +
    "\000\002\007\005\000\002\007\003\000\002\005\005\000" +
    "\002\010\004\000\002\010\003\000\002\011\003\000\002" +
    "\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\014\006\001\002\000\004\015\016\001" +
    "\002\000\004\002\015\001\002\000\004\004\007\001\002" +
    "\000\004\005\010\001\002\000\004\012\012\001\002\000" +
    "\006\006\014\012\013\001\002\000\006\006\ufffd\012\ufffd" +
    "\001\002\000\006\006\ufffe\012\ufffe\001\002\000\004\015" +
    "\uffff\001\002\000\004\002\001\001\002\000\004\004\020" +
    "\001\002\000\004\002\000\001\002\000\004\005\021\001" +
    "\002\000\004\010\022\001\002\000\006\012\031\013\032" +
    "\001\002\000\006\006\025\007\026\001\002\000\006\006" +
    "\ufffa\007\ufffa\001\002\000\004\002\ufffc\001\002\000\004" +
    "\010\022\001\002\000\006\006\ufffb\007\ufffb\001\002\000" +
    "\010\011\034\012\031\013\032\001\002\000\010\011\ufff5" +
    "\012\ufff5\013\ufff5\001\002\000\010\011\ufff6\012\ufff6\013" +
    "\ufff6\001\002\000\010\011\ufff7\012\ufff7\013\ufff7\001\002" +
    "\000\006\006\ufff9\007\ufff9\001\002\000\010\011\ufff8\012" +
    "\ufff8\013\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\006\002\004\003\003\001\001\000\004\004" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\023\007\022\001\001\000\006\010\027" +
    "\011\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\026\001\001\000\002\001\001" +
    "\000\004\011\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDatos$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDatos$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDatos$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Estructuras que guardan las la de claves y de registros
    public LinkedList<String> raizClaves;
    public LinkedList<Registro> raizRegistros;

    //Método al que se llama automáticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        System.err.println("Error sintáctico en la línea " + (s.left) + "Columna " + (s.right) + ". No se esperaba este componente: " + (s.value) + ".");
    }

    //Método al que se llama en el momento en que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintáctico en la línea " + (s.left) + "Columna " + (s.right) + ". Componente " + (s.value) + " no reconocido.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDatos$actions {
  private final ParserDatos parser;

  /** Constructor */
  CUP$ParserDatos$actions(ParserDatos parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDatos$do_action_part00000000(
    int                        CUP$ParserDatos$act_num,
    java_cup.runtime.lr_parser CUP$ParserDatos$parser,
    java.util.Stack            CUP$ParserDatos$stack,
    int                        CUP$ParserDatos$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDatos$result;

      /* select the action based on the action number */
      switch (CUP$ParserDatos$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).value;
		RESULT = start_val;
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDatos$parser.done_parsing();
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CLAVES REGISTROS 
            {
              Object RESULT =null;
		
    
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLAVES ::= rclaves igual corcheteabierto LISTA_CLAVES corchetecerrado 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).right;
		LinkedList<String> lista = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).value;
		
        parser.raizClaves = lista;
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("CLAVES",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_CLAVES ::= LISTA_CLAVES cadena 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("LISTA_CLAVES",4, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_CLAVES ::= cadena 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.add(a);
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("LISTA_CLAVES",4, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // REGISTROS ::= rregistros igual corcheteabierto LISTA_REGISTROS corchetecerrado 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).right;
		LinkedList<Registro> a = (LinkedList<Registro>)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).value;
		
        parser.raizRegistros = a;
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("REGISTROS",2, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_REGISTROS ::= LISTA_REGISTROS coma REGISTRO 
            {
              LinkedList<Registro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).right;
		LinkedList<Registro> a = (LinkedList<Registro>)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Registro b = (Registro)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
        RESULT = a; 
        RESULT.add(b);
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("LISTA_REGISTROS",5, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_REGISTROS ::= REGISTRO 
            {
              LinkedList<Registro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Registro a = (Registro)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
        RESULT = new LinkedList();
        RESULT.add(a);
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("LISTA_REGISTROS",5, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // REGISTRO ::= llaveabierta LISTA_VALORES llavecerrada 
            {
              Registro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).right;
		LinkedList<Valor> a = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).value;
		
        RESULT = new Registro(a);
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("REGISTRO",3, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_VALORES ::= LISTA_VALORES VALOR 
            {
              LinkedList<Valor> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).right;
		LinkedList<Valor> a = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Valor b = (Valor)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
        RESULT = a; 
        RESULT.add(b);
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",6, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_VALORES ::= VALOR 
            {
              LinkedList<Valor> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Valor a = (Valor)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
        RESULT = new LinkedList(); 
        RESULT.add(a);
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",6, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VALOR ::= numerico 
            {
              Valor RESULT =null;
		int valor_numericoleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int valor_numericoright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		String valor_numerico = (String)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
        RESULT = new Valor(valor_numerico, "numerico");
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("VALOR",7, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VALOR ::= cadena 
            {
              Valor RESULT =null;
		int valor_stringleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int valor_stringright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		String valor_string = (String)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
        RESULT = new Valor(valor_string, "cadena");
    
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("VALOR",7, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDatos$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDatos$do_action(
    int                        CUP$ParserDatos$act_num,
    java_cup.runtime.lr_parser CUP$ParserDatos$parser,
    java.util.Stack            CUP$ParserDatos$stack,
    int                        CUP$ParserDatos$top)
    throws java.lang.Exception
    {
              return CUP$ParserDatos$do_action_part00000000(
                               CUP$ParserDatos$act_num,
                               CUP$ParserDatos$parser,
                               CUP$ParserDatos$stack,
                               CUP$ParserDatos$top);
    }
}

}
