
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;
import main.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserReportes extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symReportes.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserReportes() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserReportes(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserReportes(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\010\010\000\002\010\006\000\002" +
    "\010\010\000\002\010\014\000\002\011\014\000\002\012" +
    "\006\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\006\007\000\002" +
    "\015\005\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\007\017" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\014\017\012\020\006\021\011\030\013\031" +
    "\005\001\002\000\016\002\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\030\ufffe\031\ufffe\001\002\000\004\006\127\001\002\000" +
    "\004\034\111\001\002\000\016\002\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\030\ufffd\031\ufffd\001\002\000\004\002\110\001" +
    "\002\000\004\034\100\001\002\000\004\034\032\001\002" +
    "\000\004\006\020\001\002\000\016\002\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\030\ufffc\031\ufffc\001\002\000\016\002\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\030\ufffb\031\ufffb\001\002\000" +
    "\016\002\000\017\012\020\006\021\011\030\013\031\005" +
    "\001\002\000\016\002\uffff\017\uffff\020\uffff\021\uffff\030" +
    "\uffff\031\uffff\001\002\000\010\032\022\033\021\034\025" +
    "\001\002\000\006\007\uffe4\010\uffe4\001\002\000\006\007" +
    "\uffe5\010\uffe5\001\002\000\006\007\026\010\027\001\002" +
    "\000\006\007\uffe7\010\uffe7\001\002\000\006\007\uffe6\010" +
    "\uffe6\001\002\000\004\005\031\001\002\000\010\032\022" +
    "\033\021\034\025\001\002\000\006\007\uffe8\010\uffe8\001" +
    "\002\000\016\002\uffe9\017\uffe9\020\uffe9\021\uffe9\030\uffe9" +
    "\031\uffe9\001\002\000\004\004\033\001\002\000\012\022" +
    "\035\023\034\024\040\025\036\001\002\000\004\006\075" +
    "\001\002\000\004\006\070\001\002\000\004\006\047\001" +
    "\002\000\004\005\046\001\002\000\004\006\041\001\002" +
    "\000\004\034\042\001\002\000\004\010\043\001\002\000" +
    "\004\033\044\001\002\000\004\007\045\001\002\000\004" +
    "\005\ufff5\001\002\000\016\002\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\030\ufffa\031\ufffa\001\002\000\004\034\050\001\002" +
    "\000\004\010\051\001\002\000\004\033\052\001\002\000" +
    "\004\010\053\001\002\000\016\011\061\012\060\013\056" +
    "\014\057\015\055\016\054\001\002\000\004\010\uffec\001" +
    "\002\000\004\010\uffed\001\002\000\004\010\uffef\001\002" +
    "\000\004\010\uffee\001\002\000\004\010\ufff0\001\002\000" +
    "\004\010\ufff1\001\002\000\004\010\063\001\002\000\006" +
    "\032\065\033\064\001\002\000\004\007\uffea\001\002\000" +
    "\004\007\uffeb\001\002\000\004\007\067\001\002\000\004" +
    "\005\ufff4\001\002\000\004\034\071\001\002\000\004\010" +
    "\072\001\002\000\004\033\073\001\002\000\004\007\074" +
    "\001\002\000\004\005\ufff7\001\002\000\004\034\076\001" +
    "\002\000\004\007\077\001\002\000\004\005\ufff6\001\002" +
    "\000\004\004\101\001\002\000\004\027\102\001\002\000" +
    "\004\006\105\001\002\000\004\005\104\001\002\000\016" +
    "\002\ufff8\017\ufff8\020\ufff8\021\ufff8\030\ufff8\031\ufff8\001" +
    "\002\000\004\033\106\001\002\000\004\007\107\001\002" +
    "\000\004\005\ufff2\001\002\000\004\002\001\001\002\000" +
    "\004\004\112\001\002\000\004\026\113\001\002\000\004" +
    "\006\116\001\002\000\004\005\115\001\002\000\016\002" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\030\ufff9\031\ufff9\001\002" +
    "\000\004\034\117\001\002\000\004\010\120\001\002\000" +
    "\004\033\121\001\002\000\004\010\122\001\002\000\016" +
    "\011\061\012\060\013\056\014\057\015\055\016\054\001" +
    "\002\000\004\010\124\001\002\000\006\032\065\033\064" +
    "\001\002\000\004\007\126\001\002\000\004\005\ufff3\001" +
    "\002\000\004\033\130\001\002\000\004\010\131\001\002" +
    "\000\004\033\132\001\002\000\004\010\133\001\002\000" +
    "\004\034\134\001\002\000\004\010\135\001\002\000\004" +
    "\033\136\001\002\000\004\010\137\001\002\000\004\033" +
    "\140\001\002\000\004\007\141\001\002\000\004\005\142" +
    "\001\002\000\016\002\uffe3\017\uffe3\020\uffe3\021\uffe3\030" +
    "\uffe3\031\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\016\002\007\003\015\004\003\005\006\006" +
    "\013\007\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\016\005\006\006" +
    "\013\007\014\001\001\000\002\001\001\000\006\015\022" +
    "\016\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\122\001\001\000\002\001\001" +
    "\000\004\014\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserReportes$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserReportes$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserReportes$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Estructuras que guardan las la de claves y de registros
    public LinkedList<Object> lista_instrucciones;
    public LinkedList<Variable> lista_declaracion = new LinkedList();

    //Método al que se llama automáticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String error = "Error sintáctico en la línea " + (s.left) + " Columna " + (s.right) + ". No se esperaba este componente: " + (s.value);
        Main_Interfaz.lista_errores.add(new Errores(error, s.value, s.left, s.right));
        System.err.println("Error sintáctico en la línea " + (s.left) + "Columna " + (s.right) + ". No se esperaba este componente: " + (s.value) + ".");
    }

    //Método al que se llama en el momento en que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintáctico en la línea " + (s.left) + "Columna " + (s.right) + ". Componente " + (s.value) + " no reconocido.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserReportes$actions {
  private final ParserReportes parser;

  /** Constructor */
  CUP$ParserReportes$actions(ParserReportes parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserReportes$do_action_part00000000(
    int                        CUP$ParserReportes$act_num,
    java_cup.runtime.lr_parser CUP$ParserReportes$parser,
    java.util.Stack            CUP$ParserReportes$stack,
    int                        CUP$ParserReportes$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserReportes$result;

      /* select the action based on the action number */
      switch (CUP$ParserReportes$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		RESULT = start_val;
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserReportes$parser.done_parsing();
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LISTA_INSTRUCCIONES 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
        parser.lista_instrucciones = lista;
    
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_INSTRUCCIONES ::= LISTA_INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = a;
            RESULT.add(b);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = new LinkedList();
            RESULT.add(a);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = a;
            parser.lista_declaracion.add(a);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = a;
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= GRAFICAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Grafica a = (Grafica)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = a;
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= rnumerico id igual FUNCION_NUMERICA puntoycoma 
            {
              Variable RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		FuncionNumerica a = (FuncionNumerica)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		
            RESULT = new Variable(a, "numerico", nombre);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= rcadena id igual FUNCION_CADENA puntoycoma 
            {
              Variable RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		ObtenerSi a = (ObtenerSi)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		
            RESULT = new Variable(a, "cadena", nombre);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= rarchivo id igual FUNCION_ARCHIVO puntoycoma 
            {
              Variable RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		
                RESULT = new Variable(new Archivo(nombre,ruta),"archivo", nombre);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION_NUMERICA ::= rsumar parentesisabierto id coma cadena parentesiscerrado 
            {
              FuncionNumerica RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		
            RESULT = new FuncionNumerica("sumar", identificador);
            RESULT.setCadena(value);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("FUNCION_NUMERICA",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION_NUMERICA ::= rcontar parentesisabierto id parentesiscerrado 
            {
              FuncionNumerica RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		
            RESULT = new FuncionNumerica("contar", identificador);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("FUNCION_NUMERICA",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION_NUMERICA ::= rpromedio parentesisabierto id coma cadena parentesiscerrado 
            {
              FuncionNumerica RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		
            RESULT = new FuncionNumerica("promedio", identificador);
            RESULT.setCadena(value);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("FUNCION_NUMERICA",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION_NUMERICA ::= rcontarsi parentesisabierto id coma cadena coma OPERADOR coma VALOR parentesiscerrado 
            {
              FuncionNumerica RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-7)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-7)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-7)).value;
		int claveleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)).right;
		String clave = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)).value;
		int operador_relleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int operador_relright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		String operador_rel = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Valor value = (Valor)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		
            RESULT = new FuncionNumerica("contarsi", identificador);
            RESULT.setCadena(clave);
            RESULT.setOperador(operador_rel);
            RESULT.setValor(value);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("FUNCION_NUMERICA",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-9)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION_CADENA ::= robtenersi parentesisabierto id coma cadena coma OPERADOR coma VALOR parentesiscerrado 
            {
              ObtenerSi RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-7)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-7)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-7)).value;
		int claveleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)).right;
		String clave = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)).value;
		int operador_relleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int operador_relright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		String operador_rel = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Valor value = (Valor)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		
            RESULT = new ObtenerSi(identificador, clave, operador_rel, value);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("FUNCION_CADENA",7, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-9)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION_ARCHIVO ::= rleerarchivo parentesisabierto cadena parentesiscerrado 
            {
              String RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		
            RESULT = ruta;
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("FUNCION_ARCHIVO",8, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERADOR ::= mayor 
            {
              String RESULT =null;
		
            RESULT = ">";
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("OPERADOR",9, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERADOR ::= menor 
            {
              String RESULT =null;
		
            RESULT = "<";
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("OPERADOR",9, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERADOR ::= mayoroigual 
            {
              String RESULT =null;
		
            RESULT = ">=";
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("OPERADOR",9, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERADOR ::= menoroigual 
            {
              String RESULT =null;
		
            RESULT = "<=";
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("OPERADOR",9, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERADOR ::= dobleigual 
            {
              String RESULT =null;
		
            RESULT = "==";
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("OPERADOR",9, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERADOR ::= diferentede 
            {
              String RESULT =null;
		
            RESULT = "!=";
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("OPERADOR",9, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= numerico 
            {
              Valor RESULT =null;
		int numerosleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int numerosright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		String numeros = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = new Valor(numeros, "numerico");
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= cadena 
            {
              Valor RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = new Valor(texto, "cadena");
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("VALOR",10, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IMPRIMIR ::= rimprimir parentesisabierto LISTA_EXPRESIONES parentesiscerrado puntoycoma 
            {
              Imprimir RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		LinkedList<Expresion> lista = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		
            RESULT = new Imprimir(lista);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES coma EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		LinkedList<Expresion> lista = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		int siguiente_expresionleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int siguiente_expresionright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Expresion siguiente_expresion = (Expresion)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = lista;
            RESULT.add(siguiente_expresion);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",11, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int primera_expresionleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int primera_expresionright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Expresion primera_expresion = (Expresion)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = new LinkedList();
            RESULT.add(primera_expresion);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",11, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= id 
            {
              Expresion RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = new Expresion(variable, "variable");
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= numerico 
            {
              Expresion RESULT =null;
		int numerosleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int numerosright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		String numeros = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = new Expresion(numeros, "numerico");
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= cadena 
            {
              Expresion RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		
            RESULT = new Expresion(texto, "cadena");
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // GRAFICAR ::= rgraficar parentesisabierto cadena coma cadena coma id coma cadena coma cadena parentesiscerrado puntoycoma 
            {
              Grafica RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-10)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-10)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-10)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-8)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-8)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-8)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-6)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-6)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-6)).value;
		int valxleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)).left;
		int valxright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)).right;
		String valx = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)).value;
		int valyleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int valyright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		String valy = (String)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		
            RESULT = new Grafica(nombre, titulo, identificador, valx, valy);
        
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("GRAFICAR",5, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-12)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserReportes$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserReportes$do_action(
    int                        CUP$ParserReportes$act_num,
    java_cup.runtime.lr_parser CUP$ParserReportes$parser,
    java.util.Stack            CUP$ParserReportes$stack,
    int                        CUP$ParserReportes$top)
    throws java.lang.Exception
    {
              return CUP$ParserReportes$do_action_part00000000(
                               CUP$ParserReportes$act_num,
                               CUP$ParserReportes$parser,
                               CUP$ParserReportes$stack,
                               CUP$ParserReportes$top);
    }
}

}
